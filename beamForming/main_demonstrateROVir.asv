load('hipSlice.mat')
load('noiseForHipSlice.mat')
rawog = raw; % rawog shows the fully sampled full fov data for reference
[Nogx, Nyog, Nzog, Nc, Ns] = size(rawog);
[Nt, ~] = size(noise);

% prepare raw reduced fov data
Rfovx = 1; Rfovy = 4; Rfovz = 1;
Rfov = [Rfovx, Rfovy, Rfovz];
raw = rawog(:, 1 : Rfovy: end, :, :, :);

% prepare calibration data
refLinesNum = 36; % Ny_og;
refLines = Nyog/2-refLinesNum/2  + 1 : Nyog/2+ refLinesNum/2 ;
calib = rawog(:, refLines, :, :, :);

[Nxc, Nyc, Nzc, Nc] = size(calib);
[Nx , Ny , Nz , ~ ] = size(raw);
[Ntp, ~] = size( noise );

% % load the masks on the full FOV data. 
% load('masks_onFullSampledData_forReference.mat')
% % This just has the centerValues of the masks along the PE direction.
% load('centerValues_onFullSampledData_forReference.mat')

%% Create images of the original (full fov), the aliased image (imRaw), and the calibration
imRawog = zeros(size(rawog));
imRaw = zeros(size(raw));
imCalib = zeros(size(calib));

for chiter = 1 : Nc
    imRawog(:, :, :, chiter) = ifftnc(rawog(:, :, :, chiter));
    imRaw(:, : ,:, chiter) = ifftnc(raw(: ,: ,:, chiter));
    imCalib(:, :, :, chiter) = ifftnc(calib(:, :, :, chiter));
end

imRawogsos = func_sqSOS(imRawog,[]);
imRawsos = func_sqSOS(imRaw, []);
imCalibsos = func_sqSOS(imCalib, []);

figure,
subplot(1, 3, 1)
imshow(abs(imRawogsos), []),
title('image of original fully sampled data')

subplot(1, 3, 2)
imshow(abs(imRawsos), []),
title('image of original reduced FOV sampled data')

subplot(1, 3, 3)
imagesc(abs(imCalibsos)), colormap('gray')
title('image of original Full FOV sampled calibration data')

%% Load masks
% Masks are applied to the calibration data. 
% Here i have two masks, one for each hip.
 load('masks4Calib.mat')
  load('centerValues4Calib.mat') % this jsut tells you 
 %%
 eigNum = Nc; %number of virtual channels.  I want to show all virtual channels.
 maskinput = masks(:, :, :, 1);
 [ROVirAllVC,~, Vs, ds, SIR_array] = ...
        func_ROVir_nc(raw, calib, maskinput, 1-maskinput, eigNum); %func_ROVir(raw, ref, mask, eigNum) ;
 % Vs:  all eigenvectors of [R_{int}]^{-1}[R_s].
 % ds:  the eigenvalues of [R_{int}]^{-1}[R_s].
 %  SIR_ARRAY:  gives you the SIR (signal-interference-ratio) of each "virtual channel".
 %  "signal" refers to the power of signal within the roi
 %  "interference" refers to the power of signal outside of the roi.
%%
imrovirallvcs = zeros(size(ROVirAllVC));

for chiter = 1 : Nc
    imrovirallvcs(:, :, :, chiter) = ...
        ifftnc(ROVirAllVC(:, :, :, chiter));
end


%% 
figure, plot(abs(SIR_array))
hold on
plot(abs(ds), 'o') 
% this tells me that only the first five channels hold significant signal
%%
imrovirallvcs_sos = func_sqSOS(imrovirallvcs(:, :, :, 1 : 5), []);
figure,
imshow([abs(imrovirallvcs_sos), abs(imRawsos], [])